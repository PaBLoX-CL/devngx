{"name":"Devngx","tagline":"Dead simple and virginal development environment for GNU/Linux","body":"### What's this all about?\r\n\r\nThis is a very simple set of bash scripts that automate a bit my workflow to setup local environments. As you can see, it's quite opinionated, and I basically use it \r\n\r\n### Requirements\r\n\r\n+ [foreman](https://github.com/ddollar/foreman \"Foreman - Manage Procfile-based applications\") \r\n+ A dns server (I recommend `dnsmasq`)\r\n+ `nginx`\r\n+ `bash`\r\n+ `mktemp`\r\n\r\n### How-to\r\n\r\n#### Setup\r\n\r\nBesides having First you have to make sure that your dns server catches all calls to `*.dev`. In the case of `dnsmasq`, it's enough adding:\r\n\r\n```\r\n# /etc/dnsmasq.conf\r\naddress=/dev/127.0.0.1\r\n```\r\n\r\nMy nginx configuration is something like this:\r\n\r\n```\r\n# /etc/nginx/nginx.conf\r\nhttp { \r\n    …\r\n    include sites/enabled/*.conf;\r\n    …\r\n}\r\n\r\n$ tree /etc/nginx/sites\r\n/etc/nginx/sites\r\n├── available\r\n│   ├── pablox.conf\r\n│   └── resp.conf\r\n└── enabled\r\n    ├── pablox.conf -> ../available/pablox.conf\r\n    └── resp.conf -> ../available/resp.conf\r\n```\r\n\r\n#### Usage\r\n```\r\n$ git clone https://github.com/PaBLoX-CL/devngx && cd devng\r\n$ ./devngx rails-api ~/documentation/rails-api activate # the last argument is optional\r\n‘/tmp/pablo/tmp.lWY5EvdHDe/rails-api.nginx.conf’ -> ‘/etc/nginx/sites/available/rails-api.conf’\r\n‘/etc/nginx/sites/enabled/rails-api.conf’ -> ‘/etc/nginx/sites/available/rails-api.conf’\r\n‘/tmp/pablo/tmp.lWY5EvdHDe/rails-api.Procfile’ -> ‘/home/pablo/Documents/rails-api/Procfile’\r\n‘/tmp/pablo/tmp.lWY5EvdHDe/rails-api.Procfile.dev’ -> ‘/home/pablo/Documents/rails-api/Procfile.dev’\r\n‘/tmp/pablo/tmp.lWY5EvdHDe/rails-api.env’ -> ‘/home/pablo/Documents/rails-api/.env’\r\n$ sudo nginx -s reload\r\n$ rm Procfile.dev # not needed\r\n```\r\n\r\nNow we need to make a modification (assuming you already have a rails application with the docs built... here it is [a pretty good article][1] on how to do it):\r\n\r\n```\r\n$ cat /etc/nginx/enabled/rails-api.dev\r\nserver {\r\n  listen 80;\r\n  server_name rails-api.dev;\r\n\r\n  location / {\r\n    proxy_pass http://127.0.0.1:3003;\r\n  }\r\n}\r\n$ cat .env\r\nPORT=3003\r\n$ cat Procfile\r\nserver: bundle exec rackup -p $PORT\r\n$ foreman start\r\n22:32:28 server.1 | started with pid 11692\r\n22:32:29 server.1 | [2014-10-08 22:32:29] INFO  WEBrick 1.3.1\r\n22:32:29 server.1 | [2014-10-08 22:32:29] INFO  ruby 2.1.2 (2014-05-08) [x86_64-linux]\r\n22:32:29 server.1 | [2014-10-08 22:32:29] INFO  WEBrick::HTTPServer#start: pid=11692 port=3003\r\n```\r\n\r\nGo to your browser, write http://rails-api.dev, TADÁ!\r\n\r\n### Gotchas\r\n\r\nThe method to keep count of which port we are using it's pretty basic:\r\n\r\n```\r\n$ cat ~/.config/devngx/conf\r\nport=3004\r\n```\r\n\r\nStopping the app in the middle, could led to weird issues, specially if it's stopped before reaching the count is augmented (see [_fin.sh][_fin.sh].\r\n\r\n### TODO\r\n+ To do\r\n\r\n### Problem?\r\n\r\nPlease, just [report a bug](https://github.com/PaBLoX-CL/devngx/issues). \r\n\r\n[1]: http://patrickoscity.de/blog/offline-ruby-rails-documentation/\r\n[_fin.sh]: https://github.com/PaBLoX-CL/devngx/blob/master/_fin.sh","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}